import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '3.0.2'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.8.10'
    id 'org.jetbrains.kotlin.plugin.lombok' version '1.8.10'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.8.10'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.8.10'
    id 'io.freefair.lombok' version '5.3.0'
    id 'com.google.cloud.tools.jib' version '3.3.1'
}

group = 'tw.gaas'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.0'
    implementation 'javax.validation:validation-api:2.0.1.Final'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'io.cucumber:cucumber-jvm:7.11.1'
    implementation 'io.cucumber:cucumber-spring:7.11.1'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.cucumber:cucumber-spring:7.11.1'
    testImplementation 'io.cucumber:cucumber-java:7.11.1'
    testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.11.1'
    testImplementation 'org.junit.platform:junit-platform-suite'
    testImplementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.0.2'
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

tasks.test {
    useJUnitPlatform()
    systemProperty('cucumber.junit-platform.naming-strategy', 'long')
}

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

jib {
    def gitHash = getGitHash()
    def versionTag = String.format("%s-%s", project.version, gitHash)
    def yugiohContainerImage = System.getenv('CR_URI') ?: 'docker.io/hhnj/yugioh'
    to {
        image = yugiohContainerImage
        tags = [versionTag, 'latest'] as List<String>
        auth {
            username = System.getenv('CR_USERNAME') ?: ''
            password = System.getenv('CR_PASSWORD') ?: ''
        }
    }
}
